import rateLimit from 'express-rate-limit';\nimport RedisStore from 'rate-limit-redis';\nimport { createClient } from 'redis';\nimport { env } from '../config/environment.js';\n\n// Create Redis client if Redis URL is available\nlet redisClient;\nif (env.REDIS_URL) {\n  try {\n    redisClient = createClient({ url: env.REDIS_URL });\n    redisClient.connect();\n    console.log('✅ Redis connected for rate limiting');\n  } catch (error) {\n    console.warn('⚠️  Redis connection failed, using memory store for rate limiting:', error.message);\n  }\n}\n\n// Helper function to create rate limiter\nconst createRateLimiter = (options) => {\n  const config = {\n    windowMs: options.windowMs || 15 * 60 * 1000, // 15 minutes default\n    max: options.max || 100, // Default limit\n    message: {\n      success: false,\n      message: options.message || 'Too many requests, please try again later.',\n      retryAfter: Math.ceil((options.windowMs || 15 * 60 * 1000) / 1000),\n    },\n    standardHeaders: true, // Include rate limit headers\n    legacyHeaders: false,\n    // Use Redis store if available, otherwise fall back to memory\n    store: redisClient ? new RedisStore({\n      sendCommand: (...args) => redisClient.sendCommand(args),\n    }) : undefined,\n    ...options,\n  };\n  \n  return rateLimit(config);\n};\n\n// General API rate limiter - applies to all routes\nexport const generalRateLimit = createRateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: env.isProduction() ? 1000 : 2000, // More lenient in development\n  message: 'Too many requests from this IP, please try again later.',\n});\n\n// Authentication rate limiter - more restrictive\nexport const authRateLimit = createRateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 10, // 10 attempts per 15 minutes\n  message: 'Too many authentication attempts, please try again in 15 minutes.',\n  skipSuccessfulRequests: true, // Don't count successful requests\n});\n\n// Login rate limiter - very restrictive\nexport const loginRateLimit = createRateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 login attempts per 15 minutes\n  message: 'Too many login attempts, please try again in 15 minutes.',\n  skipSuccessfulRequests: true,\n});\n\n// OTP rate limiter - prevent OTP spam\nexport const otpRateLimit = createRateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  max: 2, // 2 OTP requests per minute\n  message: 'Too many OTP requests, please wait before requesting another.',\n});\n\n// Password reset rate limiter\nexport const passwordResetRateLimit = createRateLimiter({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 3, // 3 password reset attempts per hour\n  message: 'Too many password reset attempts, please try again later.',\n});\n\n// Payment rate limiter - prevent payment abuse\nexport const paymentRateLimit = createRateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  max: 10, // 10 payment operations per minute\n  message: 'Too many payment requests, please slow down.',\n});\n\n// Registration rate limiter\nexport const registerRateLimit = createRateLimiter({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 5, // 5 registration attempts per hour\n  message: 'Too many registration attempts, please try again later.',\n});\n\n// Search rate limiter - prevent search abuse\nexport const searchRateLimit = createRateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  max: 30, // 30 searches per minute\n  message: 'Too many search requests, please slow down.',\n});\n\n// Admin operations rate limiter - more lenient for admin users\nexport const adminRateLimit = createRateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 500, // 500 requests per 15 minutes for admin\n  message: 'Too many admin requests, please try again later.',\n});\n\n// File upload rate limiter\nexport const uploadRateLimit = createRateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  max: 5, // 5 uploads per minute\n  message: 'Too many file uploads, please wait before uploading again.',\n});\n\n// Account actions rate limiter (profile updates, etc.)\nexport const accountRateLimit = createRateLimiter({\n  windowMs: 60 * 1000, // 1 minute\n  max: 10, // 10 account actions per minute\n  message: 'Too many account operations, please slow down.',\n});\n\n// Custom rate limiter for specific user actions\nexport const createCustomRateLimit = (windowMs, max, message) => {\n  return createRateLimiter({ windowMs, max, message });\n};\n\n// Rate limit bypass for whitelisted IPs (admin panel, etc.)\nconst whitelistedIPs = env.isProduction() \n  ? [] // Add trusted IPs in production\n  : ['127.0.0.1', '::1']; // Local IPs in development\n\nexport const rateLimitBypass = (req, res, next) => {\n  const clientIP = req.ip || req.connection.remoteAddress;\n  \n  if (whitelistedIPs.includes(clientIP)) {\n    return next(); // Skip rate limiting for whitelisted IPs\n  }\n  \n  next();\n};\n\n// Rate limit information middleware\nexport const rateLimitInfo = (req, res, next) => {\n  // Add rate limit information to response headers\n  res.setHeader('X-RateLimit-Policy', 'Applied');\n  next();\n};\n\n// Graceful shutdown handler for Redis connection\nprocess.on('SIGTERM', () => {\n  if (redisClient) {\n    redisClient.quit();\n  }\n});\n\nexport default {\n  general: generalRateLimit,\n  auth: authRateLimit,\n  login: loginRateLimit,\n  otp: otpRateLimit,\n  passwordReset: passwordResetRateLimit,\n  payment: paymentRateLimit,\n  register: registerRateLimit,\n  search: searchRateLimit,\n  admin: adminRateLimit,\n  upload: uploadRateLimit,\n  account: accountRateLimit,\n  custom: createCustomRateLimit,\n  bypass: rateLimitBypass,\n  info: rateLimitInfo,\n};\n